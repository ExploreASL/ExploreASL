function varargout = cat12(varargin)
% ______________________________________________________________________
% CAT12 Toolbox wrapper to start CAT with different user modes or 
% default files.  Changing the user mode requires restarting of CAT and
% SPM.  The expert user mode allows to control further parameters and  
% semi-evaluated functions, whereas the developer mode contain parameter
% for internal tests and unsafe functions.
% 
%   cat12(action)
%   
%   CAT user modes:
%     action = ['default','expert','developer'] 
%
%   CAT default files for other species (in development):
%     action = ['oldwoldmonkeys'|'greaterapes']
%
%   CAT start with own default files:
%     action = 'select' 
%     action = 'mypath/cat_defaults_mydefaults'
%
% ______________________________________________________________________
% Christian Gaser, Robert Dahnke
% $Id: cat12.m 1613 2020-05-04 17:36:07Z gaser $

% CAT12 M-file for cat12.fig
%      CAT12, by itself, creates a new CAT12 or raises the existing
%      singleton*.
%
%      H = CAT12 returns the handle to a new CAT12 or the handle to
%      the existing singleton*.
%
%      CAT12('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in CAT12.M with the given input arguments.
%
%      CAT12('Property','Value',...) creates a new CAT12 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before DEM_demo_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to cat12_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above title to modify the response to help cat12

% Last Modified by GUIDE v2.5 23-Jan-2018 22:36:22

% Turn off gifti data warning in gifti/subsref (line 45)
%   Warning: A value of class "int32" was indexed with no subscripts specified. 
%            Currently the result of this operation is the indexed value itself, 
%            but in a future release, it will be an error. 

%#ok<*NASGU,*INUSD,*DEFNU>

global sz sc FS catversion expert cat_bg

warning('off','MATLAB:subscripting:noSubscriptsSpecified');

if nargin==0 
  spm_cat12;
  return;
elseif nargin==1 && ~strcmp(varargin{1},'fig')
  spm_cat12(varargin{1});
  return;
elseif nargin==2 && ~strcmp(varargin{1},'fig')
  spm_cat12(varargin{1},varargin{2});
  return;
end

% do some initializations if called for the first time
if nargin <= 1
  expert = cat_get_defaults('extopts.expertgui');
  WSM    = spm('WinSize','M');
  sc     = max(1,(WSM(4)/550));
  sz     = sc*[391 550]; % window size
  
  [catversion.rel, catversion.ver, catversion.dat] = cat_version;

  % check for update and send Matlab version with 10s delay %% EXPLOREASL HACK
  % if strcmpi(spm_check_version,'octave')
  %   call_server;
  % else
  %   try
  %     start(timer('StartDelay',10,'TimerFcn',@call_server));  
  %   catch
  %     call_server;
  %   end
  % end
  
  cat_bg = imread(fullfile(spm('dir'),'toolbox','cat12','html','images','cat_bg.jpg'));
  
  % get default font size
  FS = cat_get_defaults('extopts.fontsize');
  if isempty(FS)
    FS = get(0,'defaultuicontrolFontSize');
  end
  FS = max(9, FS);
end

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @cat12_OpeningFcn, ...
                   'gui_OutputFcn',  @cat12_OutputFcn, ...
                   'gui_LayoutFcn',  @cat12_LayoutFcn, ...
                   'gui_Callback',   []);
                   
if nargin && ~strcmp(varargin{1},'fig') && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT



% --- Executes just before cat12 is made visible.
function cat12_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to cat12 (see VARARGIN)

% Choose default command line output for cat12
handles.output = hObject; 

% Update handles structure
guidata(hObject, handles);

% enable/disable different menus if TFCE is installed or not
if exist(fullfile(spm('dir'),'toolbox','TFCE'),'dir')
    set(handles.popupTFCEToolbox,'String',{center('TFCE'),'Call TFCE Toolbox'});
else
    set(handles.popupTFCEToolbox,'String',{center('TFCE'),'Install TFCE Toolbox'});
end

% --- Outputs from this function are returned to the command line.
function varargout = cat12_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global sz sc FS expert cat_bg
spm_clf('Interactive'); 

% Get default command line output from handles structure
varargout{1} = handles.output;

species = cat_get_defaults('extopts.species'); 
switch expert
  case 1, set(handles.CAT,'color', [0.85 0.85 0.85]);
  case 2, set(handles.CAT,'color', [0.93 0.93 0.93]); 
end

% This creates the 'background' image
handles.ma = axes('parent',handles.CAT,'units','points','position',[1 1 sz]);
imagesc(cat_bg,'parent',handles.ma); 
axis('off'); 
text(sz(1)/20,sc*80,'Computational Anatomy Toolbox','Color',[1 1 1],'Fontsize',FS+5,'Fontweight','bold');

switch species
  case 'human',           speciesdisp = ''; 
  case 'ape_greater',     speciesdisp = ' (greater apes)';
  case 'ape_lesser',      speciesdisp = ' (lesser apes)';
  case 'monkey_oldworld', speciesdisp = ' (oldworld monkeys)'; 
  case 'monkey_newworld', speciesdisp = ' (newworld monkeys)'; 
  case 'chimpanzee',      speciesdisp = ' (chimpanzee)'; 
  case 'baboon',          speciesdisp = ' (baboons)';
  case 'macaque',         speciesdisp = ' (macaques)';
  case 'dog',             speciesdisp = ' (dogs)'; 
  otherwise,              speciesdisp = ''; 
end
switch expert
  case 1, text(sz(1)/20,sc*105,['Expert Mode'    speciesdisp],'Color',[0.1 0.7 1.0],'Fontsize',FS+3,'Fontweight','bold'); 
  case 2, text(sz(1)/20,sc*105,['Developer Mode' speciesdisp],'Color',[1.0 0.0 0.0],'Fontsize',FS+3,'Fontweight','bold');
end
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function CAT_CreateFcn(hObject, eventdata, handles)
% hObject    handle to CAT (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


%-------------------------------------------------------------------

% --- Executes on button press in pushSegment.
function pushSegment_Callback(hObject, eventdata, handles) 
spm_jobman('interactive','','spm.tools.cat.estwrite');

% --- Executes on button press in pushSegmentLong.
function pushSegmentLong_Callback(hObject, eventdata, handles)
spm_jobman('interactive','','spm.tools.cat.tools.long');

% --- Executes on button press in pushResampleSmooth.
function pushResampleSmooth_Callback(hObject, eventdata, handles)
spm_jobman('interactive','','spm.tools.cat.stools.surfresamp');

% --- Executes on button press in pushDisplaySurfaces.
function pushDisplaySurfaces_Callback(hObject, eventdata, handles)
cat_surf_display;

% --- Executes on button press in pushInteractiveHelp.
function pushInteractiveHelp_Callback(hObject, eventdata, handles)
web(fullfile(spm('Dir'),'toolbox','cat12','html','cat.html'));

% --- Executes on button press in pushMode.
function pushMode_Callback(hObject, eventdata, handles)
global expert

if expert
  spm_cat12;
else
  spm_cat12('expert');
end

% --- Executes on button press in pushBasicModels.
function pushBasicModels_Callback(hObject, eventdata, handles)
spm_jobman('interactive','cat_stat_factorial_design.m');

% --- Executes on button press in pushEstimateSurfaceModels.
function pushEstimateSurfaceModels_Callback(hObject, eventdata, handles)
cat_stat_spm;

% --- Executes on button press in pushROIAnalysis.
function pushROIAnalysis_Callback(hObject, eventdata, handles)
cat_stat_analyze_ROIs;

% --- Executes on button press in pushGetTIV.
function pushGetTIV_Callback(hObject, eventdata, handles)
spm_jobman('interactive','','spm.tools.cat.tools.calcvol');

% --- Executes on selection change in popupTFCEToolbox.
function popupTFCEToolbox_Callback(hObject, eventdata, handles)
% Hints: contents = cellstr(get(hObject,'String')) returns popupTFCEToolbox contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupTFCEToolbox
if get(hObject,'Value') == 2
    if exist(fullfile(spm('dir'),'toolbox','TFCE'))
        % call TFCE toolbox 
        spm_TFCE;
    else % install TFCE toolbox
        cat_install_tfce(1);
    end
end

%-------------------------------------------------------------------

% --- Creates and returns a handle to the GUI figure. 
function h0 = cat12_LayoutFcn(policy)

persistent hsingleton;
global sz sc FS x2w expert catversion cat_bg

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'uipanel', 38, ...
    'text', 13, ...
    'axes', 7, ...
    'pushbutton', 175, ...
    'popupmenu', 18, ...
    'togglebutton', 2, ...
    'activex', 2), ...
    'override', 1, ...
    'release', 13, ...
    'resize', 'simple', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 0, ...
    'blocking', 0);
appdata.lastValidTag = 'CAT';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'CAT');


%PF = spm_platform('fonts');     %-Font names (for this platform)
Fgraph = spm_figure('GetWin','Graphics');
WSG    = get(Fgraph,'Position');

% close existing cat12 window
Tag = 'CAT';
F   = findall(allchild(0),'Flat','Tag',Tag);
if ~isempty(F), close(F); end

%-------------------------------------------------------------------
% gui positions
x2  = sc*[27 201];    % x-pos two columns
bh  = 26;             % button height 
x2w = sc*163;         % width button/popupmenu for two columns
th  = sc*(FS+5);      % text field height
tw  = sc*333;         % text field width
yo  = sc*30;          % y-offset of button field from bottom
yd  = sc*30;          % y-distance between buttons
to  = sc*[-10 0 20 0];% offset for correcting text fields
bo  = [to(1) -0.15*yd*sc to(3) -0.4*yd*sc]; % offset for correcting background box
tg  = [tw*1.5,tw*1.5];    % resolution adaption for menu panels

if ismac
    if cat_io_matlabversion>20110
        po = [-3 -2 7 0]; % offset for correcting popup menus
    else
        po = [-1 -3 3 0]; % offset for correcting popup menus
    end
else
  if isunix % Linux
    po = [0 0 0 0];
  else % Windows
    po = [0 0 0 0];
  end
end

%-------------------------------------------------------------------


h0 = figure(...
  'PaperUnits','inches',...
  'Units','pixels',...
  'Position',[WSG(1)+WSG(3)+5 WSG(2)+WSG(4)-sz(2)+25 sz(1) sz(2)],...
  'Visible',get(0,'defaultfigureVisible'),...
  'Color',[0.8 0.8 0.8],...
  'Colormap',gray(64),...
  'DockControls','off',...
  'CloseRequestFcn',get(0,'defaultfigureCloseRequestFcn'),...
  'ResizeFcn',blanks(0),...
  'IntegerHandle','off',...
  'MenuBar','none',...
  'ToolBar',get(0,'defaultfigureToolBar'),...
  'Pointer',get(0,'defaultfigurePointer'),...
  'PointerShapeHotSpot',get(0,'defaultfigurePointerShapeHotSpot'),...
  'Name','cat12',...
  'NumberTitle','off',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag',Tag,...
  'UserData',[],...
  'WindowStyle',get(0,'defaultfigureWindowStyle'),...
  'Resize','off',...
  'PaperPosition',get(0,'defaultfigurePaperPosition'),...
  'PaperSize',[8.5 11],...
  'PaperType','usletter',...
  'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
  'PaperOrientation',get(0,'defaultfigurePaperOrientation'),...
  'HandleVisibility','callback');
  
  
%-------------------------------------------------------------------
% Preprocessing
%-------------------------------------------------------------------
h01 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','',...
  'Style','pushbutton',...
  'enable','inactive',...
  'cdata',cat_interp_menuimgs(cat_bg,tg),...
  'Position',[x2(1) yo+(9*yd) tw 5*yd]+bo,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textPreprocessing',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

h02 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Preprocessing',...
  'FontWeight','bold',...
  'Style','pushbutton',...
  'enable','inactive',...
  'ForegroundColor',[0.9 0.9 0.9],...
  'cdata',cat_interp_menuimgs(imread(fullfile(spm('dir'),'toolbox','cat12','html','images','cat_hd02blue2.png')),tg),...
  'Position',[x2(1) yo+(13*yd) tw th]+to,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textPreprocessing',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushSegment_Callback';

h03 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Segment',...
  'Position',[x2(1) yo+(12*yd) x2w bh],...
  'TooltipString','Segment Cross-Sectional Data',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushSegment',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

    if expert
      set(h03,...  
      'Style','popupmenu',...
      'Callback','spm(''PopUpCB'',gcbo)',...
      'Value',1,...
      'Position',get(h03,'Position')+po,...
      'String',{center('Segment');...
        sprintf('%s: Segmentation r%s (%s) - actual release',catversion.rel,catversion.ver,datestr(catversion.dat,'YYYY/mm'));...
        ...'CAT12.7: Segmentation r1585 (2020/03)';...-27
        'CAT12.6: Segmentation r1445 (2019/03)';...-27
        'CAT12.1: Segmentation r1173 (2017/09)';...-01
      },...
      'UserData',{...
        'spm_jobman(''interactive'','''',''spm.tools.cat.estwrite'');'...
        ...'spm_jobman(''interactive'','''',''spm.tools.cat.estwrite1585'');'...
        'spm_jobman(''interactive'','''',''spm.tools.cat.estwrite1445'');'...
        'spm_jobman(''interactive'','''',''spm.tools.cat.estwrite1173'');'...
      });
    else
        set(h03,...  
      'Style','pushbutton',...
      'Callback',@(hObject,eventdata)cat12('pushSegment_Callback',hObject,eventdata,guidata(hObject)));
    end

appdata = [];
appdata.lastValidTag = 'pushSegmentLong_Callback';

h04 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Segment Longitudinal',...
  'Position',[x2(2) yo+(12*yd) x2w bh],...
  'TooltipString','Segment Longitudinal Data',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushSegmentLong',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

  if expert
    set(h04,...  
      'Style','popupmenu',...
      'Callback','spm(''PopUpCB'',gcbo)',...
      'Value',1,...
      'Position',get(h04,'Position')+po,...
      'String',{center('Segment Longitudinal');...
        sprintf('%s: Segment Longitudinal Data r%s (%s) - actual release ',catversion.rel,catversion.ver,datestr(catversion.dat,'YYYY/mm'));...
        'CAT12.6: Segment Longitudinal Data r1445 (2019/03)';...-27
        'CAT12.1: Segment Longitudinal Data r1173 (2017/09)';...-01
      },...
      'UserData',{...
        'spm_jobman(''interactive'','''',''spm.tools.cat.tools.long'');'...
        'spm_jobman(''interactive'','''',''spm.tools.cat.tools.long1445'');'...
        'spm_jobman(''interactive'','''',''spm.tools.cat.tools.long1173'');'...
      });
  else
    set(h04,...  
      'Style','pushbutton',...
      'Callback',@(hObject,eventdata)cat12('pushSegmentLong_Callback',hObject,eventdata,guidata(hObject)));
  end

appdata = [];
appdata.lastValidTag = 'popupROITools_Callback';

h05 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(2) yo+(11*yd) x2w bh]+po,...
  'TooltipString','Extract ROI Data Using Atlases or Estimate Mean Volumes',...
  'String',{  center('ROI Tools');...
    'Extract ROI-based Surface Values';...
    'Estimate Mean Value Inside ROI for External Analysis' },...
  'UserData',{...
    'spm_jobman(''interactive'','''',''spm.tools.cat.stools.surf2roi'');'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.tools.calcroi'');' },...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupROITools',...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupVolumeTools_Callback';

str_vol = {center('Volume Tools'),...
  'Denoising Filter (SANLM)',...
  'Automatically Set Origin Using Center-of-Mass',...
  'Apply Deformations (Many Subjects)',...
  'Apply Deformations (Many Images)',...
  'Calculate Differences Between Volumes',...
  'Calculate Volume Average'};
userdata_vol = {...
  'spm_jobman(''interactive'','''',''spm.tools.cat.tools.sanlm'');'...
  'cat_vol_set_com;'...
  'spm_jobman(''interactive'','''',''spm.tools.cat.tools.defs2'');'...
  'spm_jobman(''interactive'','''',''spm.tools.cat.tools.defs'');'...
  'cat_stat_diff'...
  'spm_jobman(''interactive'','''',''spm.tools.cat.tools.avg_img'');'...
  };
      
% add some expert entries
if expert
  str_vol = [str_vol, ...
    {'Reduce Bounding Box (Data Trimming)'},...
    {'Longitudinal Registration'}];
  userdata_vol = [userdata_vol, ...
    {'spm_jobman(''interactive'','''',''spm.tools.cat.tools.datatrimming'');'},...
    {'spm_jobman(''interactive'','''',''spm.tools.cat.tools.series'')'}];
end   

h06 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Position',[x2(1) yo+(11*yd) x2w bh]+po,...
  'TooltipString','Additional Volume Tools',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupVolumeTools',...
  'String',str_vol,...
  'UserData',userdata_vol,...
  'Value',1,...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupSurfaceMeasures_Callback';

h07 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(1) yo+(10*yd) x2w bh]+po,...
  'TooltipString','Extract Additional Surface Measures or Map Volumes to Surfaces',...
  'String',{  center('Surface Measures');...
    'Extract Additional Surface Parameters ';...
    'Map Volume (Native Space) to Individual Surface';...
    'Map Normalized Volume (Template Space) to Template Surface';...
    'Nonlinear Co-Register and Map Volume (Native Space) to Individual Surface' },...
  'UserData',{...
    'spm_jobman(''interactive'','''',''spm.tools.cat.stools.surfextract'')'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.stools.vol2surf'')'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.stools.vol2surftemp'')'...
    'spm_jobman(''interactive'',''cat_surf_coregvol2surf.m'')'},...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupSurfaceMeasures',...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName')); 

appdata = [];
appdata.lastValidTag = 'popupSurfaceCalulator_Callback';

h08 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Position',[x2(2) yo+(10*yd) x2w bh]+po,...
  'TooltipString','Surface Calulator (i.e. Imcalc for Surfaces)',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupSurfaceCalulator',...
  'Value',1,...
  'String',{  center('Surface Calculator');...
    'Surface Calculator ';...
    'Surface Calculator (Subject-wise)';...
     'Calculate Differences Between Surfaces'; },...
  'UserData',{...
    'spm_jobman(''interactive'','''',''spm.tools.cat.stools.surfcalc'')'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.stools.surfcalcsub'')'...
    'cat_stat_diff'},...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushResampleSmooth_Callback';

h09 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Resamp. & Smooth Surf.',...
  'Style','pushbutton',...
  'Position',[x2(1) yo+(9*yd) x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushResampleSmooth_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Resample and Smooth Surface Data',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushResampleSmooth',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushDisplaySurfaces_Callback';

h10 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Display Surfaces',...
  'Style','pushbutton',...
  'Position',[x2(2) yo+(9*yd) x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushDisplaySurfaces_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Display Surfaces',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushDisplaySurfaces',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

%-------------------------------------------------------------------
% Statistical Analysis
%-------------------------------------------------------------------
h11 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','',...
  'Style','pushbutton',...
  'enable','inactive',...
  'cdata',cat_interp_menuimgs(cat_bg,tg),...
  'Position',[x2(1) yo+(5*yd) tw 4*yd]+bo,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textPreprocessing',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

h12 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Statistical Analysis',...
  'FontWeight','bold',...
  'Style','pushbutton',...
  'enable','inactive',...
  'ForegroundColor',[0.9 0.9 0.9],...
  'cdata',cat_interp_menuimgs(imread(fullfile(spm('dir'),'toolbox','cat12','html','images','cat_hd02red.png')),tg),...
  'Position',[x2(1) yo+(8*yd) tw th]+to,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textStatisticalAnalysis',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupDataQuality_Callback';

h13 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(1) yo+(7*yd) x2w bh]+po,...
  'TooltipString','Check Data Quality or SPM Design',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupDataQuality',...
  'String',{  center('Data Quality');...
    'VBM Data Homogeneity';...
    'Surface Data Homogeneity';...
    'Check SPM Design';...
    'Slice Display' },...
  'UserData',{...
    'spm_jobman(''interactive'','''',''spm.tools.cat.tools.check_cov'');'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.stools.check_mesh_cov'');'...
    'cat_stat_check_SPM;'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.tools.showslice'');' },...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupTFCEToolbox_Callback';

h14 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback',@(hObject,eventdata)cat12('popupTFCEToolbox_Callback',hObject,eventdata,guidata(hObject)),...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(2) yo+(7*yd) x2w bh]+po,...
  'TooltipString','Call Threshold-Free Cluster Enhancement (TFCE) Toolbox',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupTFCEToolbox',...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushBasicModels_Callback';

h15 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Basic Models',...
  'Style','pushbutton',...
  'Position',[x2(1) yo+(6*yd) x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushBasicModels_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Basic Statistical Models (2nd-Level)',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushBasicModels',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushEstimateSurfaceModels_Callback';

h16 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Estimate Surface Models',...
  'Style','pushbutton',...
  'Position',[x2(2) yo+(6*yd) x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushEstimateSurfaceModels_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Model Estimation for Surface Data',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushEstimateSurfaceModels',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushROIAnalysis_Callback';

h17 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','ROI Analysis',...
  'Style','pushbutton',...
  'Position',[x2(1) yo+(5*yd) x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushROIAnalysis_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Analyze ROIs Using Existing SPM Design',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushROIAnalysis',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushGetTIV_Callback';

h18 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Get TIV',...
  'Style','pushbutton',...
  'Position',[x2(2) yo+(5*yd) x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushGetTIV_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Estimate Total Intracranial Volume (TIV)',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushGetTIV',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

%-------------------------------------------------------------------
% Result Presentation
%-------------------------------------------------------------------
h20 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','',...
  'Style','pushbutton',...
  'enable','inactive',...
  'cdata',cat_interp_menuimgs(cat_bg,tg),...
  'Position',[x2(1) yo+(3*yd) tw 2*yd]+bo,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textPreprocessing',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

h21 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Result Presentation',...
  'FontWeight','bold',...
  'Style','pushbutton',...
  'enable','inactive',...
  'ForegroundColor',[0.9 0.9 0.9],...
  'cdata',cat_interp_menuimgs(imread(fullfile(spm('dir'),'toolbox','cat12','html','images','cat_hd02green.png')),tg),...
  'Position',[x2(1) yo+(4*yd) tw th]+to,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textPresentation',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupTransform_Callback';

h22 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(1) yo+(3*yd) x2w bh]+po,...
  'TooltipString','Threshold and Transform SPM-Maps to (Log-Scaled) p-Maps or Correlation Maps',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupTransform',...
  'String',{  center('Transf. SPM Maps');...
    'T-Volume-Maps';...
    'F-Volume-Maps';...
    'T-Surface-Maps';...
    'F-Surface-Maps' },...
  'UserData',{...
    'spm_jobman(''interactive'','''',''spm.tools.cat.tools.T2x'');'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.tools.F2x'');'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.tools.T2x_surf'');'...
    'spm_jobman(''interactive'','''',''spm.tools.cat.tools.F2x_surf'');' },...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupViewResults_Callback';

h23 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(2) yo+(3*yd) x2w bh]+po,...
  'TooltipString','Display Results as Overlay on Slices or Surfaces',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupViewResults',...
  'String',{  center('View Results');...
    'Call Results';...
    'Slice Overlay (for Volumes)';...
    'Surface Overlay (for Surfaces and Volumes)' },...
  'UserData',{...
    '[hReg xSPM SPM] = cat_spm_results_ui(''Setup'');'...
    'cat_vol_slice_overlay'...
    'y = cat_surf_results;' },...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

%-------------------------------------------------------------------
% Tools
%-------------------------------------------------------------------
h30 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','',...
  'Style','pushbutton',...
  'enable','inactive',...
  'cdata',cat_interp_menuimgs(cat_bg,tg),...
  'Position',[x2(1) yo+(0*yd) tw 3*yd]+bo,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textPreprocessing',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

h31 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Tools',...
  'FontWeight','bold',...
  'Style','pushbutton',...
  'enable','inactive',...
  'ForegroundColor',[0.9 0.9 0.9],...
  'cdata',cat_interp_menuimgs(imread(fullfile(spm('dir'),'toolbox','cat12','html','images','cat_hd02purple.png')),tg),...
  'Position',[x2(1) yo+(2*yd) tw th]+to,...
  'Callback',blanks(0),...
  'TooltipString',blanks(0),...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','textTools',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupHelp_Callback';

h32 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(1) yo+(1*yd) x2w bh]+po,...
  'TooltipString','Help Functions',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupHelp',...
  'String',{  center('Help');...
    'Manual';...
    'Send Error Message';...
    'CAT Website' },...
  'UserData',{...
    'try,web(fullfile(spm(''dir''),''toolbox'',''cat12'',''CAT12-Manual.pdf''),''-browser'');end'...
    'cat_io_senderrormail;'...
    'try,web(''http://www.neuro.uni-jena.de/wordpress/vbm'',''-browser'');end' },...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'popupUtils_Callback';

h33 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'Callback','spm(''PopUpCB'',gcbo)',...
  'Style','popupmenu',...
  'Value',1,...
  'Position',[x2(2) yo+(1*yd) x2w bh]+po,...
  'TooltipString','Check for Updates and Add-Ons',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','popupUtils',...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

  % disable some not available menu entries
  if isdeployed
    set(h33,...
      'String',{  center('Add-Ons');...
        'Install CAT Atlases to SPM'  },...
      'UserData',{...
        'cat_install_atlases' })
  else
    set(h33,...
      'String',{  center('Updates/Add-Ons');...
        'Check for Updates';...
        'Install CAT Atlases to SPM'  },...
      'UserData',{...
        'cat_update(1);'...
        'cat_install_atlases' })
  end

appdata = [];
appdata.lastValidTag = 'pushInteractiveHelp_Callback';

h34 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Interactive Help',...
  'Style','pushbutton',...
  'Position',[x2(1) yo x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushInteractiveHelp_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Call Interactive Help in Matlab Browswer',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushInteractiveHelp',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

appdata = [];
appdata.lastValidTag = 'pushMode_Callback';

h35 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
  'String','Switch to Expert Mode',...
  'Style','pushbutton',...
  'Position',[x2(2) yo x2w bh],...
  'Callback',@(hObject,eventdata)cat12('pushMode_Callback',hObject,eventdata,guidata(hObject)),...
  'TooltipString','Switch Between Beginner and Expert Mode',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
  'Tag','pushMode',...
  'UserData',[],...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

if expert == 1
  set(h35,'String','Switch to Beginner Mode');
  % for standalone installations beginners mode is not allowed
  if isdeployed
    set(h35, 'Enable', 'off');
  end
end

%-------------------------------------------------------------------
% set bottom box
h40 = uicontrol(...
  'Parent',h0,...
  'Units','pixels',...
...  'BackgroundColor',[0.9400 0.9400 0.9400],...
  'ForegroundColor',[0.5 0.5 0.5],...
  'ListboxTop',0,...
  'HorizontalAlignment','center',...
  'Position',[x2(1) 7 tw th]+to,...
  'String','Copyright (c) Structural Brain Mapping Group',...
  'Style','pushbutton',...
  'enable','inactive',...
  'Tag','text080',...
  'CreateFcn', {@local_CreateFcn, blanks(0), appdata},...
  'FontSize',FS,...
  'FontName',get(0,'defaultuicontrolFontName'));

h0pos   = get(h0,'Position'); 
h40pos  = get(h40,'Position');
I2 = cat_interp_menuimgs(cat_bg,h0pos(3:4));
% cutting the image
I2( round(h0pos(4) - h40pos(2) + 1) : end ,:,:) = [];
I2( 1 : round(h0pos(4) - h40pos(2) - h40pos(4) -1) ,:,:) = [];
I2(:, round(h40pos(3) + h40pos(1) + 1) : end   ,:) = [];
I2(:, round(1 : h40pos(1) - 1)  ,:) = [];
set(h40,'cdata',I2); 

hsingleton = h0;

function I2 = cat_interp_menuimgs(I,sx)
  [X2,Y2] = meshgrid(1:size(I,2)/sx(1):size(I,2),1:size(I,1)/sx(2):size(I,1)); clear I2;
  I(end+1,:,:) = I(end,:,:); I(:,end+1,:) = I(:,end,:);
  for i=1:3, I2(:,:,i) = cat_vol_ctype(interp2(double(I(:,:,i)),X2,Y2)); end %#ok<AGROW>


%-------------------------------------------------------------------
function out = center(in)
global FS x2w

if ismac && cat_io_matlabversion<20092
  out = in;
else
  out = sprintf('%s%s',repmat(' ',1,round((1.4*x2w/FS-length(in)))),in);
end

% --- Set application data first then calling the CreateFcn. 
%-------------------------------------------------------------------
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
%-------------------------------------------------------------------
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error('MATLAB:gui_mainfcn:FieldNotFound', 'Could not find field %s in the gui_State struct in GUI M-file %s', gui_StateFields{i}, gui_Mfile);
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % CAT12
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % CAT12(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % CAT12('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % CAT12(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        fig = ancestor(fig,'figure');
        designEval = isappdata(0,'CreatingGUIDEFigure');
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        warning('off','MATLAB:hg:uicontrol:ParameterValuesMustBeValid');
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        try, guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); end
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

%-------------------------------------------------------------------
function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = openfig(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    gui_hFigure = openfig(name, singleton, visible);
end

%-------------------------------------------------------------------
function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

%-------------------------------------------------------------------
function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(strfind(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end

%-------------------------------------------------------------------
function call_server(varargin)

% send Matlab version to server
if cat_get_defaults('extopts.send_info')
  urlinfo = sprintf('%s%s%s','Start','%2F',version('-release'));
  cat_io_send_to_server(urlinfo);
end

% check for new CAT12 version
if ~isdeployed
  [sts, msg] = cat_update;
  fprintf(msg);
  fprintf('\n');
end


