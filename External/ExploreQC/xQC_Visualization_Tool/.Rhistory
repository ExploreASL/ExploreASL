library(tidyverse)
library(Hmisc)
library(sjPlot)
#library(effects)
setwd("D:")
getwd()
rm(list=ls(all=TRUE))
# read dataframe and adjust
gmn <- read.csv('Lavoro/GM_Networks/GMN/statistical_analysis/Data/gmnEPAD_global_clean_Zscore.csv')
gmn$cdr_global_score_fact <- as.factor(gmn$cdr_global_score)
gmn$site_id <- as.factor(gmn$site_id)
levels(gmn$apoe_result)[1] <- "NotSpecified"
sum(gmn$apoe_result == "NotSpecified") # 73 subjects
gmn<- gmn[-c(which(gmn$apoe_result == "NotSpecified" )),]
gmn$E4 <- "non-carriers"
rm(list=ls(all=TRUE))
# read dataframe and adjust
gmn <- read.csv('Lavoro/GM_Networks/GMN/statistical_analysis/Data/gmnEPAD_global_clean_Zscore.csv')
gmn$cdr_global_score_fact <- as.factor(gmn$cdr_global_score)
gmn$site_id <- as.factor(gmn$site_id)
getwd()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
######### Functions #########
#Define Function to find outliers
isout <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
outliers = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(outliers)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
outliers[iobs, ivar] = NaN
} else if (dfofint[iobs, ivar] >= (mean(dfofint[,ivar], na.rm = TRUE) + 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else if (dfofint[iobs, ivar] <= (mean(dfofint[,ivar], na.rm = TRUE) - 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else {
outliers[iobs, ivar] = 0
}
}
}
return(outliers)
}
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
DiffImage = configuration[which(configuration$Visualization.Module == 'DiffIm'), 'VIS_properties']
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
#Subset based on variables you want to visualize (from configuration file)
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = includeparms[,c(1:3,5)]
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
parmstoinclude = c("Subject", "Site", parmstoinclude)
qc_data_all <- qc_data_all[, names(qc_data_all) %in% parmstoinclude]
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
#this won't be needed later
qc_data_all[qc_data_all == 0] <- NaN
unique(qc_data_all$Site)
unique(qc_data_all$Site)[1]
isit = unique(qc_data_all$Site)[1]
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
sitoutliers
View(sitdf)
View(sitoutliers)
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
isub = 1
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
xS
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural']
qc_data_all$n_struct_outliers <- 0
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
xS
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'n_struct_outliers']
runApp()
runApp()
sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')]
sitdf[isub,startsWith(colnames(sitoutliers), 'Structural')]
sitdf[isub,startsWith(colnames(sitedf), 'Structural')]
sitdf[isub,startsWith(colnames(sitdf), 'Structural')]
sum(sitdf[isub,startsWith(colnames(sitdf), 'Structural')])
sum(sitdf[isub,startsWith(colnames(sitdf), 'Structural')],na.rm = TRUE)
sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')]
#Compute Z scores
isz <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
zed = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(zed)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
zed[iobs, ivar] = NaN
} else{
zed[iobs, ivar] = (dfofint[iobs, ivar]- mean(dfofint[, ivar]))/sd(dfofint[, ivar])
}
}
}
return(zed)
}
sitdf
View(sitdf)
isz(sitdf)
prov <- isz(sitdf)
View(prov)
View(sitdf)
abs(prov)
abs(prov[1,])
View(prov)
prov2 <- isout(sitdf)
View(prov2)
View(prov)
df <- sitedf
df <- sitdf
unlist(lapply(df, is.numeric))
nums <- unlist(lapply(df, is.numeric))
nums
dfofint <- df[, nums]
dfofint
rm(list=ls(all=TRUE))
#Find outliers
isout <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
outliers = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(outliers)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
outliers[iobs, ivar] = NaN
} else if (dfofint[iobs, ivar] >= (mean(dfofint[,ivar], na.rm = TRUE) + 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else if (dfofint[iobs, ivar] <= (mean(dfofint[,ivar], na.rm = TRUE) - 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else {
outliers[iobs, ivar] = 0
}
}
}
return(outliers)
}
#Compute Z scores
isz <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
zed = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(zed)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
zed[iobs, ivar] = NaN
} else{
zed[iobs, ivar] = (dfofint[iobs, ivar]- mean(dfofint[, ivar]))/sd(dfofint[, ivar])
}
}
}
return(zed)
}
#############
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
DiffImage = configuration[which(configuration$Visualization.Module == 'DiffIm'), 'VIS_properties']
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
#Subset based on variables you want to visualize (from configuration file)
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = includeparms[,c(1:3,5)]
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
parmstoinclude = c("Subject", "Site", parmstoinclude)
qc_data_all <- qc_data_all[, names(qc_data_all) %in% parmstoinclude]
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
#this won't be needed later
qc_data_all[qc_data_all == 0] <- NaN
# numbers of outliers and zscores
qc_data_all$n_struct_outliers <- 0
qc_data_all$z_score_struct <- 0
isit = 10
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
sitezed <- isz(sitdf)
View(sitezed)
isub = 1
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 2, 3)){ # 2 or 3 outliers
sitdf$Structural[isub] <- "Moderate"
} else if (xS > 3){
sitdf$Structural[isub] <- "Poor"
}
sitdf$n_struct_outliers[isub] <- xS
xS
sitdf$z_score_struct[isub]
sum(abs(sitezed[isub, startsWith(colnames(sitoutliers), 'Structural')]))
sitdf$z_score_struct[isub] <- sum(abs(sitezed[isub, startsWith(colnames(sitoutliers), 'Structural')]))
runApp()
runApp()
runApp()
shiny::runApp()
## USERS PARAMETER  ##
#Load Libraries
library(shiny)
library(ggplot2)
library(readr)
library(ggplot2)
library(gridExtra)
library(RNifti)
library(oro.nifti)
library(shinyjs)
library(wesanderson)
library(plyr)
library(openxlsx)
library(plotly)
library(dplyr)
rm(list=ls(all=TRUE))
######## Functions #########
#Find outliers
isout <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
outliers = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(outliers)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
outliers[iobs, ivar] = NaN
} else if (dfofint[iobs, ivar] >= (mean(dfofint[,ivar], na.rm = TRUE) + 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else if (dfofint[iobs, ivar] <= (mean(dfofint[,ivar], na.rm = TRUE) - 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else {
outliers[iobs, ivar] = 0
}
}
}
return(outliers)
}
#Compute Z scores
isz <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
zed = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(zed)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
zed[iobs, ivar] = NaN
} else{
zed[iobs, ivar] = (dfofint[iobs, ivar]- mean(dfofint[, ivar]))/sd(dfofint[, ivar])
}
}
}
return(zed)
}
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
DiffImage = configuration[which(configuration$Visualization.Module == 'DiffIm'), 'VIS_properties']
qc_data_all = read.csv(file.path("dataframes", "QCed_data.csv"))
print("One previous file has been found, starting from there. Delete the file to start over")
#Manage Site and patient name, This is temporary since is specific for EPAD study
qc_data_all$Site <- as.factor(qc_data_all$Site)
#This should already be present in the dataframe, will be left out later
qc_data_all$patient = qc_data_all$Subject
qc_data_all$Site
siteofint <- c("10" , "20", "31", "40", )
siteofint <- c("10" , "20", "31", "40" )
qc_data_all$Site
qc_dataTH[qc_data_all$Site %in% siteofint]
qc_data_all[qc_data_all$Site %in% siteofint]
qc_data_all[qc_data_all$Site %in% siteofint,]
qc_dataTH <- qc_data_all[qc_data_all$Site %in% siteofint,]
View(qc_dataTH)
violin <- plot_ly(qc_dataTH,
x = Site,
y = Structural_Noise_SNR_GM_Ratio,
split = Site,
type = 'violin',
box = list(
visible = T
))
violin <- plot_ly(qc_dataTH,
x = qc_dataTH$Site,
y = Structural_Noise_SNR_GM_Ratio,
split = qc_dataTH$Site,
type = 'violin',
box = list(
visible = T
))
violin <- plot_ly(qc_dataTH,
x = qc_dataTH$Site,
y = qc_dataTH$Structural_Noise_SNR_GM_Ratio,
split = qc_dataTH$Site,
type = 'violin',
box = list(
visible = T
))
violin
droplevels(qc_dataTH$Site)
qc_dataTH$Site <- droplevels(qc_dataTH$Site)
violin <- plot_ly(qc_dataTH,
x = qc_dataTH$Site,
y = qc_dataTH$Structural_Noise_SNR_GM_Ratio,
split = qc_dataTH$Site,
type = 'violin',
box = list(
visible = T
))
violin
siteofint <- c("10" , "20", "21", "31", "40", )
qc_data_all$Site
qc_dataTH <- qc_data_all[qc_data_all$Site %in% siteofint,]
qc_dataTH$Site <- droplevels(qc_dataTH$Site)
violin <- plot_ly(qc_dataTH,
x = qc_dataTH$Site,
y = qc_dataTH$Structural_Noise_SNR_GM_Ratio,
split = qc_dataTH$Site,
type = 'violin',
box = list(
visible = T
))
violin
qc_data_all$Site
qc_dataTH <- qc_data_all[qc_data_all$Site %in% siteofint,]
qc_dataTH$Site
qc_dataTH$Site <- droplevels(qc_dataTH$Site)
qc_dataTH$Site
View(qc_dataTH)
View(qc_data_all)
siteofint <- c("10" , "20", "22", "31", "40", )
qc_data_all$Site %in% siteofint
qc_dataTH <- qc_data_all[qc_data_all$Site %in% siteofint,]
qc_data_all$Site
rm(list=ls(all=TRUE))
## USERS PARAMETER  ##
#Load Libraries
library(shiny)
library(ggplot2)
library(readr)
library(ggplot2)
library(gridExtra)
library(RNifti)
library(oro.nifti)
library(shinyjs)
library(wesanderson)
library(plyr)
library(openxlsx)
library(plotly)
library(dplyr)
#Find outliers
isout <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
outliers = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(outliers)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
outliers[iobs, ivar] = NaN
} else if (dfofint[iobs, ivar] >= (mean(dfofint[,ivar], na.rm = TRUE) + 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else if (dfofint[iobs, ivar] <= (mean(dfofint[,ivar], na.rm = TRUE) - 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else {
outliers[iobs, ivar] = 0
}
}
}
return(outliers)
}
#Compute Z scores
isz <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
zed = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(zed)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
zed[iobs, ivar] = NaN
} else{
zed[iobs, ivar] = (dfofint[iobs, ivar]- mean(dfofint[, ivar]))/sd(dfofint[, ivar])
}
}
}
return(zed)
}
##############
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
DiffImage = configuration[which(configuration$Visualization.Module == 'DiffIm'), 'VIS_properties']
qc_data_all = read.csv(file.path("dataframes", "QCed_data.csv"))
print("One previous file has been found, starting from there. Delete the file to start over")
siteofint <- c("10" , "20", "22", "31", "40", )
siteofint <- c("10" , "20", "22", "31", "40" )
qc_data_all$Site
qc_dataTH <- qc_data_all[qc_data_all$Site %in% siteofint,]
qc_dataTH$Site <- droplevels(qc_dataTH$Site)
violin <- plot_ly(qc_dataTH,
x = qc_dataTH$Site,
y = qc_dataTH$Structural_Noise_SNR_GM_Ratio,
split = qc_dataTH$Site,
type = 'violin',
box = list(
visible = T
))
violin %>% layout(title = 'Between-Site Distribution',
xaxis = list(title = 'Sites', zeroline = FALSE),
yaxis = list(title = input$QCpar, zeroline = FALSE ), showlegend = FALSE)
violin
qc_dataTH$Site <- droplevels(qc_dataTH$Site)
#Manage Site and patient name, This is temporary since is specific for EPAD study
qc_data_all$Site <- as.factor(qc_data_all$Site)
#This should already be present in the dataframe, will be left out later
qc_data_all$patient = qc_data_all$Subject
siteofint <- c("10" , "20", "22", "31", "40" )
qc_data_all$Site
qc_dataTH <- qc_data_all[qc_data_all$Site %in% siteofint,]
qc_dataTH$Site <- droplevels(qc_dataTH$Site)
violin <- plot_ly(qc_dataTH,
x = qc_dataTH$Site,
y = qc_dataTH$Structural_Noise_SNR_GM_Ratio,
split = qc_dataTH$Site,
type = 'violin',
box = list(
visible = T
))
violin
violin %>% layout(title = 'Between-Site Distribution',
xaxis = list(title = 'Sites', zeroline = FALSE),
yaxis = list(title = "Signal To Noise", zeroline = FALSE ), showlegend = FALSE)
SiteData = qc_dataTH[which(qc_dataTH$Site == 40),]
SiteData
scatter1 <- plot_ly(data = SiteData, x = SiteData$patient, y = SiteData$Structural_Noise_SNR_GM_Ratio, color = SiteData$Structural,
type = "scatter",
mode = "markers",
colors = pal,
marker = list(size =10, line = list(color = "black", width = 2) ))
pal <- c("green", "yellow" ,"red")
# color is SiteData()$includecolumn
scatter1 <- plot_ly(data = SiteData, x = SiteData$patient, y = SiteData$Structural_Noise_SNR_GM_Ratio, color = SiteData$Structural,
type = "scatter",
mode = "markers",
colors = pal,
marker = list(size =10, line = list(color = "black", width = 2) ))
scatter1
SiteData = qc_dataTH[which(qc_dataTH$Site == 10),]
pal <- c("green", "yellow" ,"red")
# color is SiteData()$includecolumn
scatter1 <- plot_ly(data = SiteData, x = SiteData$patient, y = SiteData$Structural_Noise_SNR_GM_Ratio, color = SiteData$Structural,
type = "scatter",
mode = "markers",
colors = pal,
marker = list(size =10, line = list(color = "black", width = 2) ))
scatter1
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects' ,
zeroline = FALSE, showticklabels=False),
yaxis = list(title = input$QCpar, zeroline = FALSE ), showlegend = TRUE)
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects' ,
zeroline = FALSE, showticklabels=FALSE),
yaxis = list(title = input$QCpar, zeroline = FALSE ), showlegend = TRUE)
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects' ,
zeroline = FALSE, showticklabels=FALSE),
yaxis = list(title = 'Signal To Noise', zeroline = FALSE ), showlegend = TRUE)
runApp()
pal <- c("green", "yellow" ,"red")
# color is SiteData()$includecolumn
scatter1 <- plot_ly(data = SiteData, x = SiteData$patient, y = SiteData$Structural_Noise_SNR_GM_Ratio, color = SiteData$Structural,
type = "scatter",
mode = "markers",
colors = pal,
marker = list(size =10, line = list(color = "black", width = 2) ))
scatter1 %>% layout(title = 'Within-Site Distribution',
xaxis = list(title = 'Subjects' ,
zeroline = FALSE, showticklabels=FALSE),
yaxis = list(title = 'Signal To Noise', zeroline = FALSE ), showlegend = TRUE)
#shapes=list(type='line',
#x0= 0,
#x1=length(qc_data_all$patient),
