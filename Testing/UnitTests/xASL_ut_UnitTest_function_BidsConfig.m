function UnitTest = xASL_ut_UnitTest_function_BidsConfig(TestRepository)
%xASL_ut_UnitTest_function_BidsConfig Individual unit test for xASL_bids_Config
%
% INPUT:        TestRepository - Path to test repository.
%
% OUTPUT:       UnitTest  - Test structure
%               name      - Name of tested module or submodule (char array)
%               unit      - Insert one of the following: 'Module', 'Submodule' or 'Function'
%               passed    - Result of all subtests combined (true or false)
%               test      - Structure with individual subtest results
%
% -----------------------------------------------------------------------------------------------------------------------------------------------------
% DESCRIPTION:  Should be run using xASL_ut_UnitTesting.
%
% EXAMPLE:      UnitTests(1) = xASL_ut_UnitTest_function_BidsConfig(TestRepository);
% -----------------------------------------------------------------------------------------------------------------------------------------------------
% Copyright 2015-2021 ExploreASL

%% Initialize test structure

% Insert test name here
UnitTest.name = 'xASL_bids_Config';

% Define whether you are testing a module, submodule or function
UnitTest.unit = 'Function';

%% Test run 1

% Give your individual subtest a name
UnitTest.tests(1).testname = 'Create default bidsPar struct';

% Start the test
testTime = tic;

% Run your test here
bidsPar = xASL_bids_Config();

% Define one or multiple test conditions here
testCondition = true;

% Define one or multiple test conditions here
if ~isstruct(bidsPar)
    testCondition = false;
end
% Check if all fields exist
if ~isfield(bidsPar,'BIDSVersion') || ...
   ~isfield(bidsPar,'listFieldsRemoveGeneral') || ...
   ~isfield(bidsPar,'listFieldsRemoveASL') || ...
   ~isfield(bidsPar,'listFieldsRemoveM0') || ...
   ~isfield(bidsPar,'listFieldsRemoveNonASL') || ...
   ~isfield(bidsPar,'listFieldOrder') || ...
   ~isfield(bidsPar,'ASLfields') || ...
   ~isfield(bidsPar,'M0fields') || ...
   ~isfield(bidsPar,'strAslContext') || ...
   ~isfield(bidsPar,'strLabel') || ...
   ~isfield(bidsPar,'strControl') || ...
   ~isfield(bidsPar,'strM0scan') || ...
   ~isfield(bidsPar,'strCbf') || ...
   ~isfield(bidsPar,'strDeltaM') || ...
   ~isfield(bidsPar,'strM0Separate') || ...
   ~isfield(bidsPar,'strM0Included') || ...
   ~isfield(bidsPar,'strM0Estimate') || ...
   ~isfield(bidsPar,'strM0Absent') || ...
   ~isfield(bidsPar,'strPerfusion') || ...
   ~isfield(bidsPar,'strFmap') || ...
   ~isfield(bidsPar,'sidecarName') || ...
   ~isfield(bidsPar,'sidecarRequired') || ...
   ~isfield(bidsPar,'sidecarTypeSpecific') || ...
   ~isfield(bidsPar,'sidecarSuffixType') || ...
   ~isfield(bidsPar,'ASLCondition') || ...
   ~isfield(bidsPar,'listRemoveIfEmpty') || ...
   ~isfield(bidsPar,'listAnatTypes') || ...
   ~isfield(bidsPar,'BIDS2LegacyFolderConfiguration') || ...
   ~isfield(bidsPar,'datasetDescription')
    testCondition = false;
end

% Get test duration
UnitTest.tests(1).duration = toc(testTime);

% Evaluate your test
UnitTest.tests(1).passed = testCondition;


%% End of testing
UnitTest = xASL_ut_CheckSubtests(UnitTest);

end


