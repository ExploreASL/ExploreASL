%% Create JSON files from ExploreASL_ImportConfig 

fprintf('This script can be deletet, if the new version of the ExploreASL_ImportConfig was accepted...\n');

% Initialize ExploreASL
[x] = ExploreASL_Initialize;

% Define list
listOfConfigFlavors = { ...
                       'RACE5_Siemens',...
                       'RACE5_Philips',...
                       'TimFit',...
                       'Insight46',...
                       'Craniosynostosis',...
                       'SABRE',...
                       'SydneyMS_Controls',...
                       'SydneyMS_Controls',...
                       'MS_Sidney',...
                       'NOMARED',...
                       'Leiden',...
                       'WSU',...
                       'session_by_date',...
                       'Obesitas_Nijmegen',...
                       'RADAR_Sheffield',...
                       'RADAR_Glasgow',...
                       'RADAR_Bristol',...
                       'NoseWorthy',...
                       'InsomniaHC',...
                       'QSMSC',...
                       'QSMSC_MultiPhase',...
                       'HongerWinter2',...
                       'Dent',...
                       'Miami_GE',...
                       'Miami_Siemens_Rockland',...
                       'SPIR_artifact_Koen',...
                       'ExploreASLtest',...
                       'Trial_patient',...
                       'GENFI_Test',...
                       'RunDMC_inTENse',...
                       'MAGNIMS_Verona',...
                       'Frontier',...
                       'FRONTIER',...
                       'BrnoEpilepsy',...
                       'BoleStudien',...
                       'Sleep2',...
                       'HIFU_ASL_Vera',...
                       'Sleep_2018',...
                       'Sleep_2018_2',...
                       'CP_Tavi',...
                       'Iris4Jan_LongASL',...
                       'Maarten_Lequin',...
                       'Hardy',...
                       'Hardy2',...
                       'Chile',...
                       'APGEM',...
                       'Divers_Bonn',...
                       'GSP_perfusion_phantom',...
                       'Nijmegen_RunDMC_Serial_Imaging',...
                       'Nijmegen_RunDMC_Serial_Imaging2',...
                       'Michiel_Utrecht',...
                       'ACTL',...
                       'Atle_WIP_Siemens_3DGRASE',...
                       'MEDIRI',...
                       'Iris_unilateral_sclerosis',...
                       'Iris_unilateral_sclerosis2',...
                       'WRAP',...
                       'VICI',...
                       'BioCog_Repro',...
                       '22q11',...
                       'BioCog',...
                       'BioCogSiemens',...
                       'XNAT_BioCog',...
                       'DDI_IVS',...
                       'Hongerwinter',...
                       'CPC_NEURO_NPH',...
                       'Siemens_PASL_DCM',...
                       'GENFI_T1MatrixTrial',...
                       'CRUISE_pCASL_artefact',...
                       'GENFI_DF12',...
                       'GIFMI_STUMOOD',...
                       'FollowUp',...
                       'FInd',...
                       'CRUISE',...
                       '3D_Antipsychotics',...
                       'Trial_ePOD_Paul',...
                       'ASL_epod_MPH',...
                       'Score',...
                       'Score_2',...
                       'ePOD_AMPH',...
                       'Novice',...
                       'NOVICE',...
                       'NOVICE2',...
                       'Antipsychotics',...
                       'preDIVA_followUp1',...
                       'preDIVA_followUp2',...
                       'preDIVA_followUp3',...
                       'preDIVA_followUp4',...
                       'preDIVA_baselinePipeline',...
                       'preDIVA_baselinePipeline2',...
                       'GE_trial',...
                       'COBRA_ICL_BL',...
                       'COBRA_ICL_FU',...
                       'COBRA_AMC',...
                       'Parelsnoer_ASL_HJ',...
                       'INOX',...
                       'INOX2',...
                       'FIND_STUDIE',...
                       'WMH_AGEIV',...
                       'Sagittal_Sinus',...
                       'ADNI',...
                       'incoming',...
                        };

% Select Development directory
customScripts = uigetdir(x.MyPath,'Please select the Development directory...');

% Create JSON files
for iFlavor=1:length(listOfConfigFlavors)
    fprintf('%s\n', listOfConfigFlavors{iFlavor});
    imPar = ExploreASL_ImportConfig(listOfConfigFlavors{iFlavor});
    imPar.TempRoot = imPar.AnalysisRoot;
    % Fix tokenScanAliases
    if isfield(imPar,'tokenScanAliases')
        if ~isempty(imPar.tokenScanAliases)
        if ~isempty(imPar.tokenScanAliases{1})
            % Update imPar by creating a backup version
            imParOld = imPar;
            imPar.tokenScanAliases = {};
            % Iterate over token pairs
            if size(imParOld.tokenScanAliases,2)==2
                it = 1;
                for iPair=1:size(imParOld.tokenScanAliases,1)
                    imPar.tokenScanAliases{it} = imParOld.tokenScanAliases{iPair,1};
                    it = it+1;
                    imPar.tokenScanAliases{it} = imParOld.tokenScanAliases{iPair,2};
                    it = it+1;
                end
            else
                warning('There seems to be something wrong with the tokenScanAliases...');
            end
        end
        end
    end
    
    % Fix tokenScanAliases
    if isfield(imPar,'tokenVisitAliases')
        if ~isempty(imPar.tokenVisitAliases)
        if ~isempty(imPar.tokenVisitAliases{1})
            % Update imPar by creating a backup version
            imParOld = imPar;
            imPar.tokenVisitAliases = {};
            % Iterate over token pairs
            if size(imParOld.tokenVisitAliases,2)==2
                it = 1;
                for iPair=1:size(imParOld.tokenVisitAliases,1)
                    imPar.tokenVisitAliases{it} = imParOld.tokenVisitAliases{iPair,1};
                    it = it+1;
                    imPar.tokenVisitAliases{it} = imParOld.tokenVisitAliases{iPair,2};
                    it = it+1;
                end
            else
                warning('There seems to be something wrong with the tokenVisitAliases...');
            end
        end
        end
    end
    
    % Fix tokenScanAliases
    if isfield(imPar,'tokenSessionAliases')
        if ~isempty(imPar.tokenSessionAliases)
        if ~isempty(imPar.tokenSessionAliases{1})
            % Update imPar by creating a backup version
            imParOld = imPar;
            imPar.tokenSessionAliases = {};
            % Iterate over token pairs
            if size(imParOld.tokenSessionAliases,2)==2
                it = 1;
                for iPair=1:size(imParOld.tokenSessionAliases,1)
                    imPar.tokenSessionAliases{it} = imParOld.tokenSessionAliases{iPair,1};
                    it = it+1;
                    imPar.tokenSessionAliases{it} = imParOld.tokenSessionAliases{iPair,2};
                    it = it+1;
                end
            else
                warning('There seems to be something wrong with the tokenScanAliases...');
            end
        end
        end
    end

    % Write file
    validFileName = [genvarname(listOfConfigFlavors{iFlavor}) '.json'];
    spm_jsonwrite(fullfile(customScripts, 'ConfigFiles', validFileName), imPar);
end

